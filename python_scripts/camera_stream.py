#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
=============================================================================
SERVIDOR DE STREAMING DE C√ÅMARA PARA ALPHABOT2
=============================================================================
Este script crea un servidor HTTP que transmite video en tiempo real desde
la Raspberry Pi Camera usando el formato MJPEG (Motion JPEG).

CARACTER√çSTICAS:
- Resoluci√≥n: 640x480 p√≠xeles
- Frame rate: 30 FPS
- Puerto: 8080
- Formato: MJPEG (cada frame es una imagen JPEG)
- Soporta m√∫ltiples clientes simult√°neos

USO:
    python3 camera_stream.py

ACCESO AL STREAM:
    http://<IP_RASPBERRY>:8080/stream.mjpg

AUTOR: Jos√© Manuel Luque Gonz√°lez
FECHA: 2025
=============================================================================
"""

import io
import socketserver
from threading import Condition
from http import server
import picamera
import time

# =============================================================================
# CONFIGURACI√ìN DEL SERVIDOR DE STREAMING
# =============================================================================

STREAM_PORT = 8080          # Puerto HTTP donde se servir√° el stream
STREAM_WIDTH = 640          # Ancho del video en p√≠xeles
STREAM_HEIGHT = 480         # Alto del video en p√≠xeles
STREAM_FPS = 30             # Frames por segundo (aprovechando Camera v2)
STREAM_QUALITY = 60         # Calidad JPEG (0-100, menor = m√°s compresi√≥n)


# =============================================================================
# CLASE: StreamingOutput
# =============================================================================
class StreamingOutput(object):
    """
    Buffer circular para almacenar frames de video de forma thread-safe.

    Esta clase act√∫a como un puente entre la c√°mara (que genera frames) y
    el servidor HTTP (que los sirve a los clientes). Usa un Condition para
    sincronizar el acceso entre threads.

    Funcionamiento:
    1. La c√°mara escribe frames en el buffer continuamente
    2. Cuando detecta un nuevo frame (empieza con JPEG header 0xFF 0xD8),
       notifica a todos los clientes esperando
    3. Los clientes copian el frame y lo env√≠an a trav√©s de HTTP
    """

    def __init__(self):
        """Inicializa el buffer y los mecanismos de sincronizaci√≥n"""
        self.frame = None                    # √öltimo frame capturado (bytes JPEG)
        self.buffer = io.BytesIO()           # Buffer temporal para construir el frame
        self.condition = Condition()         # Lock para sincronizaci√≥n entre threads

    def write(self, buf):
        """
        M√©todo llamado por la c√°mara cada vez que hay datos nuevos.

        Args:
            buf (bytes): Datos del frame (puede ser fragmentado)

        Returns:
            int: N√∫mero de bytes escritos

        Nota:
            Este m√©todo es llamado autom√°ticamente por picamera.
            Detecta el inicio de un nuevo frame JPEG por el header 0xFF 0xD8
        """
        # Detectar inicio de nuevo frame JPEG (magic bytes)
        if buf.startswith(b'\xff\xd8'):
            # Frame completo anterior, guardarlo y notificar a los clientes
            self.buffer.truncate()           # Limpiar buffer temporal
            with self.condition:             # Adquirir lock
                self.frame = self.buffer.getvalue()  # Copiar frame completo
                self.condition.notify_all()  # Despertar a todos los clientes esperando
            self.buffer.seek(0)              # Reiniciar buffer para el nuevo frame

        # Escribir los datos recibidos al buffer temporal
        return self.buffer.write(buf)


# =============================================================================
# CLASE: StreamingHandler
# =============================================================================
class StreamingHandler(server.BaseHTTPRequestHandler):
    """
    Manejador de peticiones HTTP para servir el stream de video.

    Rutas disponibles:
    - GET / : Redirige a /stream.mjpg
    - GET /stream.mjpg : Stream MJPEG continuo
    """

    def do_GET(self):
        """
        Maneja las peticiones GET del cliente.

        Implementa dos rutas:
        1. Ra√≠z (/) - Redirige al stream
        2. /stream.mjpg - Sirve el stream MJPEG continuo
        """
        if self.path == '/':
            # ===== RUTA RA√çZ: Redirecci√≥n =====
            self.send_response(301)                           # C√≥digo 301: Moved Permanently
            self.send_header('Location', '/stream.mjpg')      # Redirigir al stream
            self.end_headers()

        elif self.path == '/stream.mjpg':
            # ===== RUTA STREAM: Transmisi√≥n continua MJPEG =====

            # Enviar headers HTTP para stream MJPEG
            self.send_response(200)                           # C√≥digo 200: OK
            self.send_header('Age', 0)                        # No cachear
            self.send_header('Cache-Control', 'no-cache, private')  # Deshabilitar cach√©
            self.send_header('Pragma', 'no-cache')            # HTTP/1.0 no-cache
            self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=FRAME')
            # ‚Üë Esto indica que es un stream que reemplaza contenido continuamente
            self.end_headers()

            try:
                # Bucle infinito: enviar frames continuamente
                while True:
                    # Esperar a que haya un nuevo frame disponible
                    with output.condition:
                        output.condition.wait()     # Bloquea hasta que hay un nuevo frame
                        frame = output.frame        # Copiar el frame actual

                    # Enviar el frame en formato MJPEG multipart
                    self.wfile.write(b'--FRAME\r\n')                            # Separador multipart
                    self.send_header('Content-Type', 'image/jpeg')             # Tipo de contenido
                    self.send_header('Content-Length', len(frame))             # Tama√±o del frame
                    self.end_headers()
                    self.wfile.write(frame)                                     # Datos JPEG
                    self.wfile.write(b'\r\n')                                   # Fin de parte

            except Exception as e:
                # Cliente desconectado o error de red
                print(f'üîå Cliente desconectado del stream: {e}')

        else:
            # ===== RUTA NO ENCONTRADA =====
            self.send_error(404)        # C√≥digo 404: Not Found
            self.end_headers()

    def log_message(self, format, *args):
        """
        Sobrescribe el m√©todo de logging para silenciar peticiones HTTP.

        Por defecto, BaseHTTPRequestHandler imprime cada petici√≥n en la consola,
        lo cual genera mucho spam. Este m√©todo vac√≠o deshabilita ese comportamiento.
        """
        return  # No hacer nada = no imprimir logs


# =============================================================================
# CLASE: StreamingServer
# =============================================================================
class StreamingServer(socketserver.ThreadingMixIn, server.HTTPServer):
    """
    Servidor HTTP con soporte para m√∫ltiples clientes simult√°neos.

    ThreadingMixIn: Crea un thread nuevo para cada cliente conectado
    HTTPServer: Servidor HTTP b√°sico

    Configuraci√≥n:
    - allow_reuse_address: Permite reusar el puerto inmediatamente despu√©s de cerrar
    - daemon_threads: Los threads de clientes se cierran autom√°ticamente al salir
    """
    allow_reuse_address = True      # Evita error "Address already in use"
    daemon_threads = True            # Threads daemon (se cierran con el programa)


# =============================================================================
# FUNCI√ìN PRINCIPAL: start_camera_stream
# =============================================================================
def start_camera_stream():
    """
    Inicializa la c√°mara y arranca el servidor de streaming.

    Proceso:
    1. Configura la Raspberry Pi Camera
    2. Inicia la captura de video en formato MJPEG
    3. Arranca el servidor HTTP
    4. Mantiene el servidor corriendo hasta Ctrl+C

    Excepciones:
    - Si la c√°mara no est√° conectada o habilitada, muestra error y sale
    - Ctrl+C detiene el servidor limpiamente
    """
    global output  # Variable global para que StreamingHandler pueda acceder

    # ===== MENSAJES DE INICIO =====
    print("=" * 60)
    print("üé• INICIANDO SERVIDOR DE STREAMING DE C√ÅMARA")
    print("=" * 60)
    print(f"üì° Puerto HTTP:    {STREAM_PORT}")
    print(f"üé¨ Resoluci√≥n:     {STREAM_WIDTH}x{STREAM_HEIGHT}")
    print(f"üéûÔ∏è  Frame rate:     {STREAM_FPS} FPS")
    print(f"üìä Calidad JPEG:   {STREAM_QUALITY}%")
    print("=" * 60)

    try:
        # ===== INICIALIZAR C√ÅMARA =====
        print("\nüì∑ Inicializando Raspberry Pi Camera v2...")
        with picamera.PiCamera(
            resolution=f'{STREAM_WIDTH}x{STREAM_HEIGHT}',
            framerate=STREAM_FPS
        ) as camera:

            # ===== CONFIGURACI√ìN DE C√ÅMARA =====
            # Rotaci√≥n de la imagen (si la c√°mara est√° montada en otro √°ngulo)
            camera.rotation = 0         # 0, 90, 180 o 270 grados

            # Espejos (descomenta si necesitas voltear la imagen)
            # camera.hflip = True       # Voltear horizontalmente
            # camera.vflip = True       # Voltear verticalmente

            # ===== CREAR BUFFER DE SALIDA =====
            output = StreamingOutput()
            
            # ===== CALIBRACI√ìN DE C√ÅMARA =====
            # Dar tiempo a la c√°mara para ajustar exposici√≥n, balance de blancos, etc.
            print("‚è≥ Esperando calibraci√≥n autom√°tica de c√°mara...")
            time.sleep(2)
            
            # ===== INICIAR CAPTURA DE VIDEO =====
            print("üé¨ Iniciando captura de video...")
            camera.start_recording(
                output,                     # Destino (nuestro buffer)
                format='mjpeg',             # Formato MJPEG
                quality=STREAM_QUALITY      # Calidad de compresi√≥n JPEG
            )

            # ===== INICIAR SERVIDOR HTTP =====
            print("üåê Iniciando servidor HTTP...")
            address = ('', STREAM_PORT)                         # Escuchar en todas las interfaces
            server = StreamingServer(address, StreamingHandler)
            
            # ===== SERVIDOR ACTIVO =====
            print("\n" + "=" * 60)
            print("‚úÖ SERVIDOR DE STREAMING ACTIVO")
            print("=" * 60)
            print(f"üåê URL del stream: http://<IP_RASPBERRY>:{STREAM_PORT}/stream.mjpg")
            print("üì± Abre esta URL en tu navegador o app Android")
            print("\n‚èπÔ∏è  Presiona Ctrl+C para detener el servidor")
            print("=" * 60 + "\n")

            try:
                # Mantener el servidor corriendo indefinidamente
                server.serve_forever()
            finally:
                # Limpieza: detener la grabaci√≥n al salir
                camera.stop_recording()
                print("\nüõë Grabaci√≥n detenida")

    except Exception as e:
        # ===== MANEJO DE ERRORES =====
        print("\n" + "=" * 60)
        print("‚ùå ERROR AL INICIAR EL STREAMING")
        print("=" * 60)
        print(f"Error: {e}")
        print("\nüí° POSIBLES SOLUCIONES:")
        print("   1. Verifica que la c√°mara est√© conectada correctamente al puerto CSI")
        print("   2. Habilita la c√°mara en raspi-config:")
        print("      sudo raspi-config")
        print("      ‚Üí Interface Options ‚Üí Camera ‚Üí Enable")
        print("   3. Instala la librer√≠a picamera:")
        print("      sudo apt-get update")
        print("      sudo apt-get install python3-picamera")
        print("   4. Reinicia la Raspberry Pi despu√©s de habilitar la c√°mara")
        print("=" * 60)


# =============================================================================
# PUNTO DE ENTRADA DEL SCRIPT
# =============================================================================
if __name__ == '__main__':
    """
    Ejecuta el servidor cuando se llama el script directamente.
    
    Maneja interrupciones de teclado (Ctrl+C) para salir limpiamente.
    """
    try:
        start_camera_stream()
    except KeyboardInterrupt:
        # Usuario presion√≥ Ctrl+C
        print("\n\n‚õî SERVIDOR DETENIDO POR USUARIO")
        print("üëã Hasta luego!")
    except Exception as e:
        # Error fatal inesperado
        print(f"\n\nüí• ERROR FATAL: {e}")
        import traceback
        traceback.print_exc()
